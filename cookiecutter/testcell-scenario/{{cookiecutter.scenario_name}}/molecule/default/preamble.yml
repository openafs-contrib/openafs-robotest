{% raw -%}
---
- name: Group sanity checks
  hosts: all
  tasks:
    - name: Verify groups
      run_once: true
      assert:
        that:
          - groups.afs_admin_client is defined
          - groups.afs_clients is defined
          - groups.afs_databases is defined
          - groups.afs_fileservers is defined
          - groups.afs_kdcs is defined
          - groups.afs_test is defined
          - groups.afs_admin_client | count == 1
          - groups.afs_clients | count > 0
          - groups.afs_databases | count > 0
          - groups.afs_fileservers | count > 0
          - groups.afs_kdcs | count == 1
          - groups.afs_test | count == 1

- name: Install files santity checks
  hosts: afs_clients:afs_fileservers:afs_databases
  tasks:
    - name: Lookup install archive
      when:
        - afs_install_method in ('bdist', 'sdist', 'packages')
        - afs_install_archive is undefined or afs_install_archive == ''
      block:
        - set_fact:
            osdist: "{{ ansible_distribution | replace(' ', '_') | lower + ansible_distribution_major_version }}"
            arch: "{{ ansible_architecture }}"

        - set_fact:
            pattern: "openafs-{{ afs_version | d('*') }}-sdist.tar.gz"
          when: afs_install_method == 'sdist'

        - set_fact:
            pattern: "openafs-{{ afs_version | d('*') }}-{{ osdist }}-{{ arch }}.{{ afs_bdist_name | d('bdist') }}.tar.gz"
          when: afs_install_method == 'bdist'

        - set_fact:
            pattern: "openafs-{{ afs_version | d('*') }}-{{ osdist }}-{{ arch }}.rpms.tar.gz"
          when:
            - afs_install_method == 'packages'
            - ansible_pkg_mgr in ('yum', 'dnf')

        - set_fact:
            pattern: "openafs-{{ afs_version | d('*') }}-{{ osdist }}-{{ arch }}.rpms.tar.gz"
          when:
            - afs_install_method == 'packages'
            - ansible_pkg_mgr in ('apt')

        - name: Lookup install tarballs
          local_action:
            module: find
            path: "{{ afs_builds | d('~/.cache/ansible-openafs/builds') }}"
            pattern: "{{ pattern }}"
          register: find_results

        - set_fact:
            tarballs: "{{ find_results.files | map(attribute='path') | list | sort(reverse=True, case_sensitive=True) }}"

        - debug:
            var: tarballs

        - name: Verify install tarball was found
          assert:
            that: tarballs | count > 0
            msg: "Distribution archives not found in controller directory {{ afs_builds | d('~/.cache/ansible-openafs/builds') }}: {{ pattern }}"

        - set_fact:
            afs_install_archive: "{{ tarballs[0] }}"

        - debug:
            var: afs_install_archive

- name: Distribute SSH keys
  hosts: all
  tasks:
    - name:
      when:
        - afs_prep_ssh_keys is defined
        - afs_prep_ssh_keys | count > 0
      block:
        - name: Ensure user ssh directory exists
          file:
            state: directory
            path: ~/.ssh
            mode: "700"

        - name: Distribute user identity_file
          copy:
            src: "{{ item }}"
            dest: ~/.ssh/id_rsa
            mode: "600"
          with_fileglob: "{{ afs_prep_ssh_keys }}/{{ ansible_user }}-{{ ansible_hostname }}-id_rsa"

        - name: Distribute user authorized keys
          authorized_key:
            user: "{{ ansible_user }}"
            key: "{{ lookup('file', '{{ item }}')}}"
          with_fileglob: "{{ afs_prep_ssh_keys }}/{{ ansible_user }}-*.pub"

        - name: Ensure root ssh directory exists
          become: yes
          file:
            state: directory
            path: ~/.ssh
            mode: "700"

        - name: Distribute root identity_file
          become: yes
          copy:
            src: "{{ item }}"
            dest: ~/.ssh/id_rsa
            mode: "600"
          with_fileglob: "{{ afs_prep_ssh_keys }}/root-{{ ansible_hostname }}-id_rsa"

        - name: Distribute root authorized keys
          become: yes
          authorized_key:
            user: "root"
            key: "{{ lookup('file', '{{ item }}')}}"
          with_fileglob: "{{ afs_prep_ssh_keys }}/root-*.pub"

- name: Rewrite hosts file
  hosts: afs_fileservers:afs_databases
  tasks:
    - name: Rewrite /etc/hosts
      become: yes
      copy:
        backup: yes
        dest: /etc/hosts
        content: |
          127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
          ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
          {% for name in hostvars | sort %}
          {{ hostvars[name].ansible_default_ipv4.address }}  {{ hostvars[name].ansible_hostname }} {{ hostvars[name].ansible_fqdn }}
          {% endfor %}
      when: afs_prep_rewrite_etc_hosts | d('no') | bool

- name: SE Linux mode
  hosts: all
  tasks:
    - set_fact:
        afs_prep_selinux_mode: "{{ lookup('env', 'AFS_PREP_SELINUX_MODE') | d('permissive', True) }}"
      when: afs_prep_selinux_mode is undefined

    - name: Configure selinux mode
      become: yes
      selinux:
        policy: targeted
        state: "{{ afs_prep_selinux_mode }}"
      when:
        - afs_prep_selinux_mode in ('permissive', 'enforcing', 'disabled')
        - ansible_selinux is defined
        - ansible_selinux.status is defined
        - ansible_selinux.status == 'enabled'

- name: Update kernel
  hosts: afs_clients:afs_builders
  tasks:
    - set_fact:
        afs_prep_update_kernel: "{{ lookup('env', 'AFS_PREP_UPDATE_KERNEL') | d('yes', true) | bool }}"
      when: afs_prep_update_kernel is undefined

    - name: Update kernel
      when:
        - afs_prep_update_kernel
        - ansible_pkg_mgr in ('yum', 'dnf')
      become: yes
      block:
        - name: Update kernel with yum
          yum:
            state: latest
            name:
              - kernel
              - kernel-devel
          register: yum_update_results

        - name: Reboot
          reboot:
            reboot_timeout: 600
          when: yum_update_results.changed

        - name: Wait for connection
          wait_for_connection:

        - name: Gather facts
          setup:

    - name: Update kernel
      when:
        - afs_prep_update_kernel
        - ansible_pkg_mgr == 'apt'
      become: yes
      block:
        - name: Update kernel with apt
          apt:
            state: latest
            name: 'linux-image*'
            only_upgrade: yes
            update_cache: yes
          register: apt_update_results

        - name: Reboot
          reboot:
            reboot_timeout: 600
          when: apt_update_results.changed

        - name: Wait for connection
          wait_for_connection:

        - name: Gather facts
          setup:
{% endraw -%}
